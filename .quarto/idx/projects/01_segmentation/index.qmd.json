{"title":"<u>Customer Segmentation with PCA & KMeans</u>","markdown":{"yaml":{"title":"<u>Customer Segmentation with PCA & KMeans</u>","image":"/images/segmentation.jpg","format":{"html":{"toc":true,"code-fold":false}},"execute":{"echo":true,"eval":true,"output":true,"engine":"jupyter","jupyter":"python3"}},"headingText":"Project Overview","containsRefs":false,"markdown":"\n\n\nPerformed customer segmentation by applying PCA for dimensionality reduction followed by KMeans clustering. Explored cluster counts from 2 to 6 and evaluated the results using both the Elbow Method and silhouette scores to ensure well-separated groupings. The analysis uncovered distinct clusters characterized by differences in shopping habits, demographics, and financial behavior, providing actionable insights for targeted marketing strategies.\n\n## My Contributions\n\n-   Performed data cleaning and exploratory analysis.\n-   Executed PCA for dimensionality reduction.\n-   Built KMeans clustering models.\n-   Visualized clustering outcomes and interpreted customer segments.\n\n## Technologies Used\n\n-   Python (Pandas, NumPy, Scikit-learn, Matplotlib, Seaborn)\n-   Jupyter Notebook\n\n## Code\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.cluster import KMeans\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import silhouette_score\n```\n\n```{python}\nfile_path = \"Segmented_Data_PCA_KMeans.xlsx\"\ndf = pd.read_excel(file_path)\n```\n\n```{python}\nsegmentation_vars = [\"Age\", \"Gender\", \"Shopping_on_Amazon\", \"annual_income_US\", \"Parent\", \"Credit\"]\ndf_segment = df[segmentation_vars]\n```\n\n```{python}\nlabel_encoders = {}\ncategorical_vars = [\"Gender\", \"Shopping_on_Amazon\", \"Parent\", \"Credit\"]\n\nfor col in categorical_vars:\n    le = LabelEncoder()\n    df_segment[col] = le.fit_transform(df_segment[col].astype(str))\n    label_encoders[col] = le\n\n```\n\n```{python}\ndf_segment[\"annual_income_US\"].fillna(df_segment[\"annual_income_US\"].median(), inplace=True)\n```\n\n```{python}\ndf_segment[\"annual_income_US\"].fillna(df_segment[\"annual_income_US\"].median(), inplace=True)\n```\n\n```{python}\nprint(df_segment.isna().sum())\n\npca = PCA(n_components=2) \ndf_pca = pca.fit_transform(df_segment) \ndf_pca = pd.DataFrame(df_pca, columns=[\"PC1\", \"PC2\"]) \nprint(df_pca)\n```\n\n```{python}\nwcss = []\nsilhouette_scores = []\n\nfor k in range(2, 7): \n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    labels = kmeans.fit_predict(df_pca)\n    wcss.append(kmeans.inertia_)\n    silhouette_scores.append(silhouette_score(df_pca, labels))\n    \nplt.figure(figsize=(8, 5))\nplt.plot(range(2, 7), wcss, marker=\"o\")\nplt.xlabel(\"Number of Clusters (K)\")\nplt.ylabel(\"WCSS\")\nplt.title(\"Elbow Method for Optimal K\")\nplt.show()\n\nfor i, k in enumerate(range(2, 7)):\n    print(f\"K={k}, Silhouette Score={silhouette_scores[i]:.4f}\")\n```\n\n```{python}\noptimal_k = 3 \nkmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)\ndf[\"Segment\"] = kmeans.fit_predict(df_pca)\ndf.to_excel(\"Segmented_Data_PCA_KMeans.xlsx\", index=False)\n\n```\n\n```{python}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x=df_pca[\"PC1\"], y=df_pca[\"PC2\"], hue=df[\"Segment\"], palette=\"viridis\")\nplt.title(\" K=3\")\nplt.xlabel(\"Principal Component 1\")\nplt.ylabel(\"Principal Component 2\")\nplt.legend(title=\"Cluster\")\nplt.show()\n```\n\n## Output\n\n```{python}\nprint(df.groupby(\"Segment\").mean())\n```\n\n```{python}\nsegment_summary = df.groupby(\"Segment\").mean()\n\nfrom IPython.display import display\ndisplay(segment_summary)\n\n```\n\n```{python}\nsegment_counts = df[\"Segment\"].value_counts()\ntotal_count = len(df)\n\nsegment_percentage = (segment_counts / total_count) * 100\nsegment_percentage_df = segment_percentage.reset_index()\nsegment_percentage_df.columns = [\"Segment\", \"Percentage\"]\ndisplay(segment_percentage_df)\n\n```\n\n```{python}\npercent_by_gender = pd.crosstab(\n    df[\"Gender\"], \n    df[\"Segment\"], \n    normalize=\"index\"\n) * 100\n\nprint(\"Row-Wise \")\ndisplay(percent_by_gender)\npercent_by_segment = pd.crosstab(\n    df[\"Gender\"], \n    df[\"Segment\"], \n    normalize=\"columns\"\n) * 100\n\nprint(\"Column-Wise \")\ndisplay(percent_by_segment)\ncounts_with_totals = pd.crosstab(\n    df[\"Gender\"], \n    df[\"Segment\"], \n    margins=True\n)\ndisplay(counts_with_totals)\n```","srcMarkdownNoYaml":"\n\n## Project Overview\n\nPerformed customer segmentation by applying PCA for dimensionality reduction followed by KMeans clustering. Explored cluster counts from 2 to 6 and evaluated the results using both the Elbow Method and silhouette scores to ensure well-separated groupings. The analysis uncovered distinct clusters characterized by differences in shopping habits, demographics, and financial behavior, providing actionable insights for targeted marketing strategies.\n\n## My Contributions\n\n-   Performed data cleaning and exploratory analysis.\n-   Executed PCA for dimensionality reduction.\n-   Built KMeans clustering models.\n-   Visualized clustering outcomes and interpreted customer segments.\n\n## Technologies Used\n\n-   Python (Pandas, NumPy, Scikit-learn, Matplotlib, Seaborn)\n-   Jupyter Notebook\n\n## Code\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.cluster import KMeans\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import silhouette_score\n```\n\n```{python}\nfile_path = \"Segmented_Data_PCA_KMeans.xlsx\"\ndf = pd.read_excel(file_path)\n```\n\n```{python}\nsegmentation_vars = [\"Age\", \"Gender\", \"Shopping_on_Amazon\", \"annual_income_US\", \"Parent\", \"Credit\"]\ndf_segment = df[segmentation_vars]\n```\n\n```{python}\nlabel_encoders = {}\ncategorical_vars = [\"Gender\", \"Shopping_on_Amazon\", \"Parent\", \"Credit\"]\n\nfor col in categorical_vars:\n    le = LabelEncoder()\n    df_segment[col] = le.fit_transform(df_segment[col].astype(str))\n    label_encoders[col] = le\n\n```\n\n```{python}\ndf_segment[\"annual_income_US\"].fillna(df_segment[\"annual_income_US\"].median(), inplace=True)\n```\n\n```{python}\ndf_segment[\"annual_income_US\"].fillna(df_segment[\"annual_income_US\"].median(), inplace=True)\n```\n\n```{python}\nprint(df_segment.isna().sum())\n\npca = PCA(n_components=2) \ndf_pca = pca.fit_transform(df_segment) \ndf_pca = pd.DataFrame(df_pca, columns=[\"PC1\", \"PC2\"]) \nprint(df_pca)\n```\n\n```{python}\nwcss = []\nsilhouette_scores = []\n\nfor k in range(2, 7): \n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    labels = kmeans.fit_predict(df_pca)\n    wcss.append(kmeans.inertia_)\n    silhouette_scores.append(silhouette_score(df_pca, labels))\n    \nplt.figure(figsize=(8, 5))\nplt.plot(range(2, 7), wcss, marker=\"o\")\nplt.xlabel(\"Number of Clusters (K)\")\nplt.ylabel(\"WCSS\")\nplt.title(\"Elbow Method for Optimal K\")\nplt.show()\n\nfor i, k in enumerate(range(2, 7)):\n    print(f\"K={k}, Silhouette Score={silhouette_scores[i]:.4f}\")\n```\n\n```{python}\noptimal_k = 3 \nkmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)\ndf[\"Segment\"] = kmeans.fit_predict(df_pca)\ndf.to_excel(\"Segmented_Data_PCA_KMeans.xlsx\", index=False)\n\n```\n\n```{python}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x=df_pca[\"PC1\"], y=df_pca[\"PC2\"], hue=df[\"Segment\"], palette=\"viridis\")\nplt.title(\" K=3\")\nplt.xlabel(\"Principal Component 1\")\nplt.ylabel(\"Principal Component 2\")\nplt.legend(title=\"Cluster\")\nplt.show()\n```\n\n## Output\n\n```{python}\nprint(df.groupby(\"Segment\").mean())\n```\n\n```{python}\nsegment_summary = df.groupby(\"Segment\").mean()\n\nfrom IPython.display import display\ndisplay(segment_summary)\n\n```\n\n```{python}\nsegment_counts = df[\"Segment\"].value_counts()\ntotal_count = len(df)\n\nsegment_percentage = (segment_counts / total_count) * 100\nsegment_percentage_df = segment_percentage.reset_index()\nsegment_percentage_df.columns = [\"Segment\", \"Percentage\"]\ndisplay(segment_percentage_df)\n\n```\n\n```{python}\npercent_by_gender = pd.crosstab(\n    df[\"Gender\"], \n    df[\"Segment\"], \n    normalize=\"index\"\n) * 100\n\nprint(\"Row-Wise \")\ndisplay(percent_by_gender)\npercent_by_segment = pd.crosstab(\n    df[\"Gender\"], \n    df[\"Segment\"], \n    normalize=\"columns\"\n) * 100\n\nprint(\"Column-Wise \")\ndisplay(percent_by_segment)\ncounts_with_totals = pd.crosstab(\n    df[\"Gender\"], \n    df[\"Segment\"], \n    margins=True\n)\ndisplay(counts_with_totals)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter","jupyter":"python3"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../custom.scss"],"toc":true,"include-in-header":["../../meta.html"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","google-site-verification":"NsbAdXXXyyhbPUML-RAXRhkbgt8stoPOTp47ISXGzQk","editor":"visual","theme":"cosmo","title":"<u>Customer Segmentation with PCA & KMeans</u>","image":"/images/segmentation.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}